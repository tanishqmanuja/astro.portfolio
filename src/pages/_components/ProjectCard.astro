---
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";

import StarIcon from "@astropub/icons/StarFilled";
import LinkIcon from "@astropub/icons/Link2";

import { getStars, isGitHubRepoUrl } from "./utils/github";
import { cached } from "@/utils/cache";

interface Props {
  project: CollectionEntry<"project">;
}

const { project } = Astro.props;
const { Content } = await render(project);

const { link } = project.data;

let stars;
if (link && isGitHubRepoUrl(link)) {
  stars = await cached(`stars/${link.slice(link.lastIndexOf("/"))}`, () =>
    getStars(link)
  );
}
---

<article class="project-card">
  <span class="project-card__title">** {project.data.title} **</span>
  {
    project.data.subtitle && (
      <span class="project-card__subtitle">--- {project.data.subtitle}</span>
    )
  }

  <div class="project-card__description">
    <Content />
  </div>

  {
    project.data.link && (
      <div class="project-card__info">
        {stars ? (
          <div class="project-info__stars">
            <StarIcon size="12" fill="gold" />
            <span>{stars} stars</span>
          </div>
        ) : null}
        <div class="project-info__link">
          <a
            href={project.data.link}
            title="Visit Repository"
            target="_blank"
            rel="noopener noreferrer"
          >
            <LinkIcon size="12" />
            Repo
          </a>
        </div>
      </div>
    )
  }
</article>

<style lang="scss">
  .project-card {
    display: flex;
    flex-direction: column;

    &__title {
      width: fit-content;
      font-weight: normal;
      font-weight: bold;
    }

    &__subtitle {
      margin-top: 4px;
      margin-bottom: 8px;
      text-transform: uppercase;
      font-size: var(--font-size-0);
      line-height: 1;
      color: var(--clr-text-secondary);
      opacity: 0.75;
    }

    &__description {
      max-width: 65ch;
      color: var(--clr-text-secondary);
    }

    &__info {
      --info-flex-gap: 1ch;

      margin-top: 8px;
      margin-left: 1px;
      display: flex;
      align-items: center;
      gap: var(--info-flex-gap);
      font-size: var(--font-size-0);
      font-family: var(--ff-pixelated);

      & > * + * {
        display: flex;
        flex-direction: row;
        align-items: center;

        &::before {
          content: " | ";
          margin-inline-end: var(--info-flex-gap);
          opacity: 0.2;
        }
      }
    }

    .project-info {
      &__stars {
        display: flex;
        align-items: center;
        column-gap: var(--info-flex-gap);
        text-transform: uppercase;
      }

      &__link {
        transition: color 0.2s;

        &:has(a:hover, a:active, a:focus-within) {
          color: var(--clr-text-highlight);
        }

        & > a {
          display: flex;
          align-items: center;
          column-gap: 1ch;
          color: var(--clr-text-primary);
          text-decoration: none;
          text-transform: uppercase;
          transition: color 0.2s;

          &:is(:hover, :active, :focus-within) {
            color: var(--clr-text-highlight);
            text-underline-offset: 0.5em;
          }
        }
      }
    }

    .decor {
      opacity: 0.2;
      white-space: nowrap;
    }
  }
</style>
