---
import type { CollectionEntry } from "astro:content";

import GithubIcon from "@astropub/icons/GitHubLogo";
import StarIcon from "@astropub/icons/StarFilled";

import { cached } from "@/utils/cache";
import { isGithubUrl, parseGithubUrl } from "@/utils/github/helpers";
import { getStars } from "./utils/github";

interface Props {
  project: CollectionEntry<"project">;
}

const { project } = Astro.props;

const {
  links: { repository },
} = project.data;

let stars: number | null = null;
if (repository && isGithubUrl(repository)) {
  const { owner, repo } = parseGithubUrl(repository);
  stars = await cached(
    `stars/${repository.slice(repository.lastIndexOf("/"))}`,
    () => getStars(owner, repo),
  );
}
---

<ul class="info | no-scrollbar-on-mobile">
  <li>
    <span>
      {project.data.subtitle}
    </span>
  </li>
  {
    stars && (
      <li>
        <StarIcon size="12" class="amber" />
        <span>{stars} stars</span>
      </li>
    )
  }
  {
    repository && (
      <li>
        <a
          class="primary-selectable"
          href={repository}
          title="Visit Repository"
        >
          <GithubIcon size="12" />
          <span>Github</span>
        </a>
      </li>
    )
  }
</ul>

<style lang="scss">
  ul {
    display: flex;
    align-items: center;
    gap: 1ch;
    margin-bottom: 1rem;
    padding-block: 0.675rem;

    font-family: var(--ff-pixelated);
    font-size: var(--fs-pixelated-small);
    text-transform: uppercase;

    border-block: 1px dashed var(--clr-text-subdued);

    overflow-x: auto;
    overscroll-behavior-x: contain;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    scroll-padding: 0 2ch;
  }

  li {
    display: flex;
    align-items: center;
    white-space: nowrap;
    gap: 1ch;
    flex-shrink: 0;

    scroll-snap-align: start;

    & > a {
      display: flex;
      align-items: center;
      gap: 1ch;
    }

    & + &::before {
      content: "|";
      color: var(--clr-text-subdued);
      padding-inline: 0.25ch;
    }
  }
</style>
