---
import { getCollection, type CollectionEntry } from "astro:content";

import ProjectCard from "@/components/project/ProjectCard.astro";
import ProjectCardHeader from "@/components/project/ProjectCardHeader.astro";
import Section from "@/components/Section.astro";

const projects = await getCollection("projects");

type Project = CollectionEntry<"projects">;
const isFeatured = (project: Project) => project.data.isFeatured;
const alphabeticSort = (a: Project, b: Project) => a.id.localeCompare(b.id);
---

<Section title="Projects">
  <h3 slot="header">
    <a href="/projects/1/" class="hoverable" set:text="Projects" /></h3
  >

  <ol>
    <div class="line" aria-hidden="true"></div>
    {
      projects
        .filter(isFeatured)
        .sort(alphabeticSort)
        .map((project, i) => (
          <li>
            <span class="marker | ff-dotmatrix" role="presentation">
              {i.toString().padStart(2, "0")}
            </span>
            <ProjectCard project={project} />
          </li>
        ))
    }
    <li>
      <span class="marker | ff-dotmatrix" role="presentation">++</span>
      <ProjectCardHeader
        slug="projects/1"
        title="All Projects"
        subtitle="Yes, there are more :)"
      />
    </li>
  </ol>
</Section>

<style lang="scss">
  h3 {
    margin-bottom: var(--space-fluid-s);
    font-family: var(--ff-pixelated);
    font-size: calc(var(--fs-fluid-2) * 0.8);
    letter-spacing: var(--letter-spacing-fluid-header);

    &::after {
      content: "...";
      color: var(--color-text-subdued);
      padding-left: 0.25ch;
      transition: letter-spacing 0.2s ease-in-out;
    }

    &:has(a:is(:hover, :focus))::after {
      content: "_..";
      letter-spacing: 0.25em;
    }
  }

  ol {
    position: relative;
    display: flex;
    flex-direction: column;
    row-gap: 1.125rem;

    .line {
      position: absolute;
      width: 1px;
      opacity: 0.25;
      z-index: -1;
      top: 1ch;
      bottom: 3ch;
      left: calc(1px + 1ch);
      border-left: 2px dotted var(--color-text-subdued);

      @media (prefers-reduced-motion: no-preference) {
        @supports (animation-timeline: scroll()) {
          animation: line auto linear;
          animation-timeline: scroll(nearest block);
          animation-range-start: entry 30%;
          animation-range-end: exit 100%;

          mask-image: linear-gradient(
            180deg,
            rgba(255, 255, 255, 1) 33.33%,
            rgba(0, 0, 0, 0) 33.33%
          );
          mask-size: 100% 300%;
          mask-position: 0 200%;

          @keyframes line {
            to {
              mask-position: 0 150%;
            }
          }
        }
      }
    }
  }

  li {
    display: grid;
    grid-template-columns: 24px 1fr;
    column-gap: 2ch;

    .marker {
      height: fit-content;
      justify-self: center;
      padding-top: 1.5px;
      font-weight: bold;
      white-space: nowrap;
      color: var(--color-text-secondary-shade);
      background-color: var(--color-background);
      box-shadow: 0 0 0 2px var(--color-background);
      transition: color 0.25s ease-in-out;

      @media (prefers-reduced-motion: no-preference) {
        @supports (view-timeline-name: --item-timeline) {
          view-timeline-name: --item-timeline;
          animation-name: marker--reveal;
          animation-fill-mode: both;
          animation-timeline: --item-timeline;
          animation-range: cover 0% cover 10%;
        }
      }
    }

    &:has(.title:is(:hover, :active, :focus-within)) {
      .marker {
        color: var(--color-text-primary);
      }
    }
  }

  @keyframes marker--reveal {
    from {
      opacity: 0;
      translate: 0 5vh;
    }
  }
</style>
